//*****************************************************************
// File:   clike.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   noviembre 2022
// Coms:   compilar mediante "ant"
//*****************************************************************



options {
 	IGNORE_CASE = false;
 	COMMON_TOKEN_ACTION = false;
 	// DEBUG_PARSER = true;
 	// ERROR_REPORTING = false;
}

PARSER_BEGIN(clike)

package traductor;
import java.io.*;
//...

public class clike {
	//...
	
    public static void main(String[] args) {
    	clike parser = null;
    	
    	try {
	    	if(args.length == 0) {
				parser = new clike(System.in);
			}
			else {
	            parser = new clike(new java.io.FileInputStream(args[0]));			// 0 puede que sea el nombre del propio ejecutable, cuidado
			}
			//Programa es el símbolo inicial de la gramática
			parser.Programa();
			//...
			System.out.println("***** Análisis terminado con éxito *****");
		}
		catch (java.io.FileNotFoundException e) {
			System.err.println ("Fichero " + args[0] + " no encontrado.");
		}
		catch (TokenMgrError e) {
        	System.err.println("LEX_ERROR: " + e.getMessage());
        }
		catch (ParseException e) {
			System.err.println("PARSE_ERROR: " + e.getMessage());
		}
		catch (Exception e) {
			System.err.println("ERROR: " + e.getMessage());
		}
        //...
    }
}
PARSER_END(clike)

SKIP : // Carácteres que debe detectar pero no generar token
{
	" "
|	"\t"
|	"\n"
|	"\r" 
}

TOKEN : {
 	< #mLETTER: ["a"-"z"] >
|	< #MLETTER: ["A"-"Z"] >
|	< #LETTER:	(<mLETTER> | <MLETTER>) >
|	< #DIGIT: 	["0"-"9"] >
|	< #NUMBER:	(<DIGIT>)+ >
|	< #IDCHAR:	(<LETTER> | <DIGIT> | "_") >
}

TOKEN : {
	< tIBLOQUE:	"{"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("inicio de bloque" + "\"" + matchedToken + "\"");
						}
|	< tFBLOQUE:	"}"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("fin de bloque" + "\"" + matchedToken + "\"");
						}
|	< tIPAREN:	"("> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("inicio de parentesis" + "\"" + matchedToken + "\"");
						}
|	< tFPAREN:	")"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("cierre de parentesis" + "\"" + matchedToken + "\"");
						}
|	< tICORCHE:	"["> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("inicio de cochete" + "\"" + matchedToken + "\"");
						}
|	< tFCORCHE:	"]"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("cierre de corchete" + "\"" + matchedToken + "\"");
						}
|	< tREFER:	"&"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("operador de referencia" + "\"" + matchedToken + "\"");
						}
|	< tFINLN:	";"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("caracter de fin de linea" + "\"" + matchedToken + "\"");
						}
|	< tASSIGN:	"="> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("operador asignacion" + "\"" + matchedToken + "\"");
						}
|	< tSUM:		"+"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("operador suma" + "\"" + matchedToken + "\"");
						}
|	< tRES:		"-"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("operador resta" + "\"" + matchedToken + "\"");
						}
|	< tMUL:		"*"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("operador multiplicacion" + "\"" + matchedToken + "\"");
						}
|	< tDIV:		"/"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("operador division" + "\"" + matchedToken + "\"");
						}
|	< tMOD:		"%"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("operador modulo" + "\"" + matchedToken + "\"");
						}
|	< tIANG:	"<"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("variable string" + "\"" + matchedToken + "\"");
						}
|	< tFANG:	">"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("variable string" + "\"" + matchedToken + "\"");
						}
|	< tNEQ:		"!="> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("operador distinto" + "\"" + matchedToken + "\"");
						}
|	< tEQ:		"=="> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("operador igual" + "\"" + matchedToken + "\"");
						}
|	< tORR:		"||"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("operador or exclusivo" + "\"" + matchedToken + "\"");
						}
|	< tNOT:		"!"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("operador negar" + "\"" + matchedToken + "\"");
						}
|	< tWHILE:	"while"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("token" + "\"" + matchedToken + "\"");
						}
|	< tIF:	"if"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("token" + "\"" + matchedToken + "\"");
						}
|	< tELSE: "else"> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("token" + "\"" + matchedToken + "\"");
						}
}

TOKEN : {
	< tBOOL: 	"bool" > {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("token" + "\"" + matchedToken + "\"");
						}
|	< tCHAR: 	"char" > {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("token" + "\"" + matchedToken + "\"");
						}
|	< tINT:		"int" > {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("token" + "\"" + matchedToken + "\"");
						}

|	< tCONST:	"'"(~[])"'" > {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("constante" + "\"" + matchedToken + "\"");
						}
|	< tCOMM: 	"//"(~["\n"])*> {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("comentario" + "\"" + matchedToken + "\"");
						}
|	< tVOID: 	"void" > {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("procedimiento" + "\"" + matchedToken + "\"");
						}
|	< tMAIN: 	"main" > {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("función" + "\"" + matchedToken + "\"");
						}
|	< tPRINT: 	"print" > {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("función" + "\"" + matchedToken + "\"");
						}
|	< tPRINTLN: "println" > {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("función" + "\"" + matchedToken + "\"");
						}
|	< tREAD: 	"read" > {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("función" + "\"" + matchedToken + "\"");
						}
|	< tREADLN: 	"readln" > {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("función" + "\"" + matchedToken + "\"");
						}
|	< tRETURN: 	"return" > {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("token" + "\"" + matchedToken + "\"");
						}
|	< t2CHAR: 	"int2char" > {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("función" + "\"" + matchedToken + "\"");
						}
|	< t2INT: 	"char2int" > {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("función " + "\"" + matchedToken + "\"");
						}
|	< tID:		(<IDCHAR>)+ > {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("identificador" + "\"" + matchedToken + "\"");
						}
|	< tSTRING:	"\"" ((~["\"" , "\n"]) | "\"\"")* "\"" > {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("constante string" + "\"" + matchedToken + "\"");
						}
|	< tCOMMA:	"," > {
							System.out.print("(" + matchedToken.beginLine + "," + matchedToken.beginColumn +"):");
							System.out.println("operador concatenación" + "\"" + matchedToken + "\"");
						}
}

SPECIAL_TOKEN : {
	<tBASURA : ~[] >
	{
		System.out.println("ERROR: Caracter extraño "+ matchedToken+", reemplazando por un espacio");
		matchedToken.image = " ";
	}

}

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
void Programa() : 
{
	Token t;
}
{
	( 
		//< tBEGIN > |
		< tBOOL > | < tCHAR > | <tINT> | < tCONST> |
			< tCOMM >  | < tVOID > | < tMAIN > | < tID > |
			< tPRINT > | <tPRINTLN> | <tREAD> | <tREADLN> |
			< tSTRING > | < tRETURN > | < t2CHAR > | < t2INT > | < tIBLOQUE > |
			< tFBLOQUE > | < tIPAREN > | < tFPAREN > | < tICORCHE > | 
			< tFCORCHE > | < tREFER > | < tFINLN > | < tASSIGN > | < tSUM > |
			< tRES > | < tMUL > | < tDIV > | < tIANG > | < tFANG > | < tNEQ > |
			< tWHILE > | < tIF > | <tELSE> | <tEQ> | <tCOMMA> | <tORR> | <tMOD> | <tNOT>
			
 
	)+
	< EOF >
}
