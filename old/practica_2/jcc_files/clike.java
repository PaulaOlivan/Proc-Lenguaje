/* Generated By:JavaCC: Do not edit this line. clike.java */
package traductor;
import java.io.*;
//...

public class clike implements clikeConstants {
        //...

    public static void main(String[] args) {
        clike parser = null;

        try {
                if(args.length == 0) {
                                parser = new clike(System.in);
                        }
                        else {
                    parser = new clike(new java.io.FileInputStream(args[0]));                   // 0 puede que sea el nombre del propio ejecutable, cuidado
                        }
                        //Programa es el símbolo inicial de la gramática
                        parser.Programa();
                        //...
                        System.out.println("***** An\u00e1lisis terminado con \u00e9xito *****");
                }
                catch (java.io.FileNotFoundException e) {
                        System.err.println ("Fichero " + args[0] + " no encontrado.");
                }
                catch (TokenMgrError e) {
                System.err.println("LEX_ERROR: " + e.getMessage());
        }
                catch (ParseException e) {
                        System.err.println("PARSE_ERROR: " + e.getMessage());
                }
                catch (Exception e) {
                        System.err.println("ERROR: " + e.getMessage());
                }
        //...
    }

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
  static final public void Programa() throws ParseException {
    label_1:
    while (true) {
      declaracion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tBOOL:
      case tCHAR:
      case tINT:
      case tVOID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  static final public void declaracion() throws ParseException {
 System.out.println("declaracion");
    if (jj_2_1(4)) {
      declaracion_variables();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tBOOL:
      case tCHAR:
      case tINT:
      case tVOID:
        declaracion_func_proc();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void declaracion_variables() throws ParseException {
 System.out.println("declaracion variables");
    tipo();
    ids();
    jj_consume_token(tPC);
  }

  static final public void ids() throws ParseException {
    if (jj_2_2(2)) {
      jj_consume_token(tID);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tID:
        jj_consume_token(tID);
        jj_consume_token(tCOMMA);
        ids();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void declaracion_func_proc() throws ParseException {
 System.out.println("declaracion procedimiento");
    tipo();
    jj_consume_token(tID);
    jj_consume_token(tAP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tBOOL:
    case tCHAR:
    case tINT:
    case tVOID:
      parametros();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(tCP);
  }

  static final public void parametros() throws ParseException {
    if (jj_2_3(2)) {
      parametro();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tBOOL:
      case tCHAR:
      case tINT:
      case tVOID:
        parametro();
        jj_consume_token(tCOMMA);
        parametros();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void parametro() throws ParseException {
    if (jj_2_4(2)) {
      tipo();
      jj_consume_token(tID);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tBOOL:
      case tCHAR:
      case tINT:
      case tVOID:
        tipo();
        jj_consume_token(tREFER);
        jj_consume_token(tID);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void instruccion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tREAD:
      inst_leer();
      jj_consume_token(tPC);
      break;
    case tREADLN:
      inst_leer_linea();
      jj_consume_token(tPC);
      break;
    default:
      jj_la1[6] = jj_gen;
      if (jj_2_5(3)) {
        inst_escribir();
        jj_consume_token(tPC);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tPRINT:
          inst_escribir_linea();
          jj_consume_token(tPC);
          break;
        default:
          jj_la1[7] = jj_gen;
          if (jj_2_6(2)) {
            inst_invoc_proc();
            jj_consume_token(tPC);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case tID:
              inst_asignacion();
              jj_consume_token(tPC);
              break;
            case tIF:
              inst_seleccion();
              break;
            case tWHILE:
              inst_iteracion();
              break;
            case tRETURN:
              inst_return();
              jj_consume_token(tPC);
              break;
            default:
              jj_la1[8] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  static final public void inst_leer() throws ParseException {
    jj_consume_token(tREAD);
    jj_consume_token(tAP);
    jj_consume_token(tID);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tCOMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_2;
      }
      jj_consume_token(tCOMMA);
      jj_consume_token(tID);
    }
    jj_consume_token(tCP);
  }

  static final public void inst_leer_linea() throws ParseException {
    jj_consume_token(tREADLN);
    jj_consume_token(tAP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tID:
      jj_consume_token(tID);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tCOMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      jj_consume_token(tCOMMA);
      jj_consume_token(tID);
    }
    jj_consume_token(tCP);
  }

  static final public void inst_escribir() throws ParseException {
    jj_consume_token(tPRINT);
    jj_consume_token(tAP);
    argumentos();
    jj_consume_token(tCP);
  }

  static final public void inst_escribir_linea() throws ParseException {
    jj_consume_token(tPRINT);
    jj_consume_token(tAP);
    argumentos();
    jj_consume_token(tCP);
  }

  static final public void argumentos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tAP:
    case tMENOS:
    case tNOT:
    case tFALSE:
    case tTRUE:
    case tINT2CHAR:
    case tCHAR2INT:
    case tID:
    case tCONST_STRING:
    case tCONST_INT:
    case tCONST_CHAR:
      expresion();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCOMMA:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_4;
        }
        jj_consume_token(tCOMMA);
        expresion();
      }
      break;
    case tEPSILON:
      jj_consume_token(tEPSILON);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void inst_asignacion() throws ParseException {
    asignable();
    jj_consume_token(tASSIGN);
    expresion();
  }

  static final public void asignable() throws ParseException {
    jj_consume_token(tID);
  }

  static final public void inst_seleccion() throws ParseException {
    jj_consume_token(tIF);
    jj_consume_token(tAP);
    expresion();
    jj_consume_token(tCP);
    bloque();
    bloque_else_ifs();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tELSE:
      jj_consume_token(tELSE);
      bloque();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void bloque_else_ifs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tELSE:
      jj_consume_token(tELSE);
      jj_consume_token(tIF);
      jj_consume_token(tAP);
      expresion();
      jj_consume_token(tCP);
      bloque();
      bloque_else_ifs();
      break;
    case tEPSILON:
      jj_consume_token(tEPSILON);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void inst_iteracion() throws ParseException {
    jj_consume_token(tWHILE);
    jj_consume_token(tAP);
    expresion();
    jj_consume_token(tCP);
    bloque();
  }

  static final public void bloque() throws ParseException {
    jj_consume_token(tIBLOQUE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tWHILE:
      case tIF:
      case tPRINT:
      case tREAD:
      case tREADLN:
      case tRETURN:
      case tID:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      instruccion();
    }
    jj_consume_token(tFBLOQUE);
  }

  static final public void inst_return() throws ParseException {
    jj_consume_token(tRETURN);
    expresion();
  }

  static final public void inst_invoc_proc() throws ParseException {
    jj_consume_token(tID);
    jj_consume_token(tAP);
    argumentos();
    jj_consume_token(tCP);
  }

  static final public void operador_not() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tNOT:
      jj_consume_token(tNOT);
      break;
    case tMENOS:
      jj_consume_token(tMENOS);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expresion() throws ParseException {
    relacion();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tOR:
    case tAND:
      mas_relation();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  static final public void mas_relation() throws ParseException {
    label_6:
    while (true) {
      and_or();
      relacion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tOR:
      case tAND:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
    }
  }

  static final public void and_or() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tOR:
      jj_consume_token(tOR);
      break;
    case tAND:
      jj_consume_token(tAND);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void relacion() throws ParseException {
    expresion_simple();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tMEN:
    case tMAY:
    case tMENI:
    case tMAYI:
    case tDIF:
    case tIG:
      operador_relacional();
      expresion_simple();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  static final public void operador_relacional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tIG:
      jj_consume_token(tIG);
      break;
    case tMEN:
      jj_consume_token(tMEN);
      break;
    case tMAY:
      jj_consume_token(tMAY);
      break;
    case tMENI:
      jj_consume_token(tMENI);
      break;
    case tMAYI:
      jj_consume_token(tMAYI);
      break;
    case tDIF:
      jj_consume_token(tDIF);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expresion_simple() throws ParseException {
    termino();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMAS:
      case tMENOS:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_7;
      }
      op_MAS_MENOS();
      termino();
    }
  }

  static final public void op_MAS_MENOS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tMAS:
      jj_consume_token(tMAS);
      break;
    case tMENOS:
      jj_consume_token(tMENOS);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tINT:
      jj_consume_token(tINT);
      break;
    case tCHAR:
      jj_consume_token(tCHAR);
      break;
    case tBOOL:
      jj_consume_token(tBOOL);
      break;
    case tVOID:
      jj_consume_token(tVOID);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void termino() throws ParseException {
    factor();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPROD:
      case tDIV:
      case tMOD:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_8;
      }
      op_MULT();
      factor();
    }
  }

  static final public void op_MULT() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tPROD:
      jj_consume_token(tPROD);
      break;
    case tDIV:
      jj_consume_token(tDIV);
      break;
    case tMOD:
      jj_consume_token(tMOD);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tAP:
    case tFALSE:
    case tTRUE:
    case tINT2CHAR:
    case tCHAR2INT:
    case tID:
    case tCONST_STRING:
    case tCONST_INT:
    case tCONST_CHAR:
      primario();
      break;
    case tMENOS:
    case tNOT:
      operador_not();
      primario();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void primario() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tAP:
      jj_consume_token(tAP);
      expresion();
      jj_consume_token(tCP);
      break;
    case tINT2CHAR:
      jj_consume_token(tINT2CHAR);
      jj_consume_token(tAP);
      expresion();
      jj_consume_token(tCP);
      break;
    case tCHAR2INT:
      jj_consume_token(tCHAR2INT);
      jj_consume_token(tAP);
      expresion();
      jj_consume_token(tCP);
      break;
    default:
      jj_la1[29] = jj_gen;
      if (jj_2_7(2)) {
        inst_invoc_proc();
      } else if (jj_2_8(2)) {
        jj_consume_token(tID);
        jj_consume_token(tACOR);
        expresion();
        jj_consume_token(tCCOR);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tID:
          jj_consume_token(tID);
          break;
        case tCONST_INT:
          jj_consume_token(tCONST_INT);
          break;
        case tCONST_CHAR:
          jj_consume_token(tCONST_CHAR);
          break;
        case tCONST_STRING:
          jj_consume_token(tCONST_STRING);
          break;
        case tTRUE:
          jj_consume_token(tTRUE);
          break;
        case tFALSE:
          jj_consume_token(tFALSE);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tAP)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tCOMMA)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(tID)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_11()) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(tPC)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(tREFER)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tACOR)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(tID)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(tCHAR2INT)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(tINT2CHAR)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(tAP)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(tPRINT)) return true;
    if (jj_scan_token(tAP)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public clikeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x202000,0x0,0x0,0x0,0x200000,0x80000000,0x80000000,0x80000000,0x7e000000,0x7e000000,0x300000,0x300000,0x0,0x1c00000,0x1c00000,0x202000,0x2000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8e0,0x8e0,0x80000,0x8e0,0x8e0,0x8e0,0xc000,0x1000,0x9000c,0x200000,0x80000,0x200000,0x200000,0x1de0302,0x10,0x1000010,0x9d00c,0x2,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x8e0,0x0,0x0,0xde0302,0x60000,0xd80300,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public clike(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public clike(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new clikeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public clike(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new clikeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public clike(clikeTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(clikeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
