//*****************************************************************
// File:   clike.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Editor: Hugo Mateo (816678) & Paula Olivan (771938)
// Date:   noviembre 2022 & febrero 2023
// Coms:   compilar mediante "ant"
//*****************************************************************

options {
 	IGNORE_CASE = false;
 	COMMON_TOKEN_ACTION = false;
 	// DEBUG_PARSER = true;
 	// ERROR_REPORTING = false;
}

PARSER_BEGIN(clike)

package traductor;

//...

public class clike {
	//...
	
    public static void main(String[] args) {
    	clike parser = null;
    	
    	try {
	    	if(args.length == 0) {
				parser = new clike(System.in);
			}
			else {
	            parser = new clike(new java.io.FileInputStream(args[0]));			// 0 puede que sea el nombre del propio ejecutable, cuidado
			}
			//Programa es el símbolo inicial de la gramática
			//parser.Programa(at);
			//...
			System.out.println("***** Análisis terminado con éxito *****");
		}
		catch (java.io.FileNotFoundException e) {
			System.err.println ("Fichero " + args[0] + " no encontrado.");
		}
		catch (TokenMgrError e) {
        	System.err.println("LEX_ERROR: " + e.getMessage());
        }
        //...
    }
}
PARSER_END(clike)

TOKEN : {
 	< #MINLET: 	["a"-"z"] >
|	< #MAYLET: 	["A"-"Z"] >
|	< #LETTER:	(<MINLET> | <MAYLET>)>
|	< #DIGIT: 	["0"-"9"] >
|	< #NUMBER:	(<DIGIT>)+ >
|	< #UNDERSC: ["_"] >
|	< #IDCHAR:	<LETTER> | <DIGIT> | <UNDERSC> >
|	< #CHAR:	(~[]) | "\\n" | "\\t" >
|	< #IBLOQUE:	["{"]>
|	< #FBLOQUE:	["}"]>
|	< #IPAREN:	["("]>
|	< #FPAREN:	[")"]>
|	< #ICORCHE:	["["]>
|	< #FCORCHE:	["]"]>
|	< #REFER:	["&"]>
|	< #FINLN:	[";"]>
|	< #ASSIGN:	["="]> //Revisar simbolos de estas funciones
|	< #SUM:		["+"]>
|	< #RES:		["-"]>
|	< #MUL:		["*"]>
|	< #DIV:		["/"]>
}

TOKEN : {
	< tBOOL: 	"bool" >
|	< tCHAR: 	"char" >
|	< tINT:		"int" >
|	< tID:		(<IDCHAR>)+ >

|	< tCONST:	"'"<CHAR>"'" >
|	< tCOMM: 	"//" >
|	< tVOID: 	"void" >
|	< tMAIN: 	"main" >
|	< tPRINT: 	"print" >
|	< tPRINTLN: "println" >
|	< tREAD: 	"read" >
|	< tREADLN: 	"readln" >
|	< tRETURN: 	"return" >
|	< t2CHAR: 	"int2char" >
|	< t2INT: 	"char2int" >
}

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
void Programa() : 
{

}
{
	( 
		//< tBEGIN > |
		< tBOOL > | < tCHAR > //| ...
	)+
	< EOF >
}
